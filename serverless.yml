service: morc-trails-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-domain-manager
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-trails
  customDomain:
    domainName: api.morcmtb.info
    certificateName: "*.morcmtb.info"
    basePath: "v1"
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-2
  memorySize: 1024 #default
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-2:*:*"

  environment:
    tableName: ${self:custom.stage}-trails"node-sass": "^4.13.1"

functions:
  create:
    handler: service/create.main
    events:
      - http:
          path: trails
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: service/get.main
    events:
      - http:
          path: trails/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: service/list.main
    events:
      - http:
          path: trails
          method: get
          cors: true
  update:
    handler: service/update.main
    events:
      - http:
          path: trails/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: service/delete.main
    events:
      - http:
          path: trails/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    TrailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: trailId
            AttributeType: S
        KeySchema:
          - AttributeName: trailId
            KeyType: HASH
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:custom.stage}-trails-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:custom.stage}-trails=user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

  Outputs:
   UserPoolId:
    Value:
      Ref: CognitoUserPool
  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient
  TrailsTableArn:
    Value:
      Fn::GetAtt:
        - TrailsTable
        - Arn
    Export:
      Name: ${self:custom.stage}-TrailsTableArn
